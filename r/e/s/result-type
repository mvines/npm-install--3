{"_id":"result-type","_rev":"3-8e6a61489e46128de8ae1f88a1305689","name":"result-type","description":"nothing but a Result type","dist-tags":{"latest":"1.0.0"},"versions":{"1.0.0":{"name":"result-type","version":"1.0.0","description":"nothing but a Result type","dependencies":{},"devDependencies":{},"repository":{"type":"git","url":"git://github.com/jkroso/result-type.git"},"bugs":{"url":"https://github.com/jkroso/result-type/issues"},"keywords":["result","type","spec"],"author":{"name":"Jake Rosoman"},"license":"MIT","readme":"\n# result-type\n\n  Just an empty class to use as a kind of tag. If your implementing something you consider to be a \"Result\" you can inherit from it and enjoy nice reliable type detection via `instanceof`. This would normally be too limited but in the case of Result implementations should be fine. Its probably a bad idea anyway though since module systems like npm can easily duplicate modules but fuck it lets see if it works with better package managers.\n\n## Installation\n\n  This form of type checking relies on identity. That means every module that dependends on it must load the exact same path.\n\n_With [component](//github.com/component/component)_  \n\n\t$ component install jkroso/result-type\n\n_With [packin](//github.com/jkroso/packin)_  \n\n\t$ packin install result-type:http://github.com/jkroso/result-type/tarball/1.0.0\n\n_With [npm](//github.com/isaacs/npm)_  \n\n\t$ echo \"good luck\" && npm install result-type\n\nthen in your app:\n\n```js\ninherit(MyResultClass, require('result-type'))\n```\n","readmeFilename":"Readme.md","_id":"result-type@1.0.0","dist":{"shasum":"e4f1a5bf226c5c6b1f1450068763ed9f4fe69879","tarball":"https://registry.npmjs.org/result-type/-/result-type-1.0.0.tgz"},"_from":".","_npmVersion":"1.2.30","_npmUser":{"name":"jkroso","email":"jkroso@gmail.com"},"maintainers":[{"name":"jkroso","email":"jkroso@gmail.com"}],"directories":{}}},"readme":"\n# result-type\n\n  Just an empty class to use as a kind of tag. If your implementing something you consider to be a \"Result\" you can inherit from it and enjoy nice reliable type detection via `instanceof`. This would normally be too limited but in the case of Result implementations should be fine. Its probably a bad idea anyway though since module systems like npm can easily duplicate modules but fuck it lets see if it works with better package managers.\n\n## Installation\n\n  This form of type checking relies on identity. That means every module that dependends on it must load the exact same path.\n\n_With [component](//github.com/component/component)_  \n\n\t$ component install jkroso/result-type\n\n_With [packin](//github.com/jkroso/packin)_  \n\n\t$ packin install result-type:http://github.com/jkroso/result-type/tarball/1.0.0\n\n_With [npm](//github.com/isaacs/npm)_  \n\n\t$ echo \"good luck\" && npm install result-type\n\nthen in your app:\n\n```js\ninherit(MyResultClass, require('result-type'))\n```\n","maintainers":[{"name":"jkroso","email":"jkroso@gmail.com"}],"time":{"modified":"2013-06-19T21:50:21.947Z","created":"2013-06-19T21:50:17.155Z","1.0.0":"2013-06-19T21:50:21.947Z"},"author":{"name":"Jake Rosoman"},"repository":{"type":"git","url":"git://github.com/jkroso/result-type.git"},"_attachments":{}}